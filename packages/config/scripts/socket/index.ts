import { getEnv } from '@l2beat/backend-tools'
import { notUndefined } from '@l2beat/shared-pure'
import { providers, utils } from 'ethers'
import { writeFile } from 'fs/promises'

import { ProjectDiscovery } from '../../src/discovery/ProjectDiscovery'

const plugAbi = ['function hub__() view returns (address)']
const plugInt = new utils.Interface(plugAbi)

// this is not a plug, but appears in the discovery output
const EXCLUDED_PLUGS = ['0x7a6Edde81cdD9d75BC10D87C490b132c08bD426D']

/**
 * This script finds all vaults that are connected to the socket bridge via plugs.
 * The vaults are used as escrows for the socket bridge.
 * It is separated from discovery as every additional plur requires modifying the
 * discovery config. The output should be studied carefully to make sure that we add
 * all the relevant escrows.
 *
 * Note that this script only works with standard plugs. If a plug is not standard,
 * the script will fail, so a non-standard plug needs to be excluded.
 *
 * The output of this script is saved as .jsonc file to allow comments.
 */
async function main() {
  const env = getEnv()

  const discovery = new ProjectDiscovery('socket')
  const plugs = discovery.getContractValue<string[]>('Socket', 'plugs')
  const plugsFiltered = plugs.filter((x) => !EXCLUDED_PLUGS.includes(x))

  const provider = new providers.AlchemyProvider(
    'homestead',
    env.string('ALCHEMY_API_KEY'),
  )
  const blockNumber = await provider.getBlockNumber()
  const vaultsRaw = await Promise.all(
    plugsFiltered.map(async (plugAddress) => {
      const tx = {
        to: plugAddress,
        data: plugInt.encodeFunctionData('hub__', []),
      }
      try {
        const addressBytes = await provider.call(tx, blockNumber)
        return utils.getAddress('0x' + addressBytes.slice(26))
      } catch (e) {
        if (
          e instanceof Error &&
          e.message.includes('Transaction reverted without a reason string')
        ) {
          console.error(
            `Plug ${plugAddress} is not a standard plug. It probably needs to be excluded and checked manually.`,
          )
          process.exit(1)
        }
        throw e
      }
    }),
  )

  const vaults = vaultsRaw
    .filter(notUndefined)
    .filter((x, i, a) => a.indexOf(x) === i)

  const comment =
    'This file was autogenerated. Do not modify it by hand, instead use: yarn update-socket'

  await writeFile(
    'src/bridges/socket-vaults.json',
    JSON.stringify({ comment, vaults, plugs }, null, 2),
  )
}

main().catch((e) => {
  console.error(e)
  process.exit(1)
})
